use lazy_static::lazy_static;
use std::{collections::HashMap, fmt::Display};

#[derive(Hash, Debug, Clone, PartialEq, Eq)]
pub enum AdrMode {
    IMPL, IMM, ABS,
    ABSX, ABSY,
    ZP, ZPX, ZPY,
    IND, INDX, INDY,
    REL
}

#[derive(Hash, Debug, Clone, PartialEq, Eq)]
pub enum Instr {
    LDA, LDX, LDY, 
    STA, STX, STY,
    TAX, TAY, TSX, TXA, TXS, TYA,
    PHA, PHP, PLA, PLP, 
    DEC, DEX, DEY, 
    INC, INX, INY, 
    ADC, SBC, 
    AND, EOR, ORA, 
    ASL, LSR, 
    ROL, ROR, 
    CLC, CLD, CLI, CLV, 
    SEC, SED, SEI, 
    CMP, CPX, CPY,
    BCC, BCS, BEQ, BMI, BNE, BPL, BVC, BVS, 
    JMP, JSR, RTS, 
    BRK, RTI, 
    BIT, NOP,

    // unofficial instructions
    STP, SLO, ANC, RLA, SRE, ALR, RRA, ARR, SAX,
    XAA, AHX, TAS, SHY, SHX, LAX, LAS, DCP, AXS,
    ISC
}

impl Display for Instr {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{:?}", self)
    }
}

#[derive(Hash, Debug, Clone, PartialEq, Eq)]
pub struct Opcode {
    pub hex: u8,
    pub official: bool,
    pub examples: Vec<String>
}

impl Opcode {
    fn new(hex: u8, official: bool, examples: Vec<String>) -> Self {
        Self {
            hex,
            official,
            examples
        }
    }
}


// https://github.com/afmika/opcodes-json-6502
lazy_static! {
    pub static ref INSTR: HashMap<String, Instr> = HashMap::from([
        ("LDA".to_string(), Instr::LDA),
        ("LDX".to_string(), Instr::LDX),
        ("LDY".to_string(), Instr::LDY),
        ("STA".to_string(), Instr::STA),
        ("STX".to_string(), Instr::STX),
        ("STY".to_string(), Instr::STY),
        ("TAX".to_string(), Instr::TAX),
        ("TAY".to_string(), Instr::TAY),
        ("TSX".to_string(), Instr::TSX),
        ("TXA".to_string(), Instr::TXA),
        ("TXS".to_string(), Instr::TXS),
        ("TYA".to_string(), Instr::TYA),
        ("PHA".to_string(), Instr::PHA),
        ("PHP".to_string(), Instr::PHP),
        ("PLA".to_string(), Instr::PLA),
        ("PLP".to_string(), Instr::PLP),
        ("DEC".to_string(), Instr::DEC),
        ("DEX".to_string(), Instr::DEX),
        ("DEY".to_string(), Instr::DEY),
        ("INC".to_string(), Instr::INC),
        ("INX".to_string(), Instr::INX),
        ("INY".to_string(), Instr::INY),
        ("ADC".to_string(), Instr::ADC),
        ("SBC".to_string(), Instr::SBC),
        ("AND".to_string(), Instr::AND),
        ("EOR".to_string(), Instr::EOR),
        ("ORA".to_string(), Instr::ORA),
        ("ASL".to_string(), Instr::ASL),
        ("LSR".to_string(), Instr::LSR),
        ("ROL".to_string(), Instr::ROL),
        ("ROR".to_string(), Instr::ROR),
        ("CLC".to_string(), Instr::CLC),
        ("CLD".to_string(), Instr::CLD),
        ("CLI".to_string(), Instr::CLI),
        ("CLV".to_string(), Instr::CLV),
        ("SEC".to_string(), Instr::SEC),
        ("SED".to_string(), Instr::SED),
        ("SEI".to_string(), Instr::SEI),
        ("CMP".to_string(), Instr::CMP),
        ("CPX".to_string(), Instr::CPX),
        ("CPY".to_string(), Instr::CPY),
        ("BCC".to_string(), Instr::BCC),
        ("BCS".to_string(), Instr::BCS),
        ("BEQ".to_string(), Instr::BEQ),
        ("BMI".to_string(), Instr::BMI),
        ("BNE".to_string(), Instr::BNE),
        ("BPL".to_string(), Instr::BPL),
        ("BVC".to_string(), Instr::BVC),
        ("BVS".to_string(), Instr::BVS),
        ("JMP".to_string(), Instr::JMP),
        ("JSR".to_string(), Instr::JSR),
        ("RTS".to_string(), Instr::RTS),
        ("BRK".to_string(), Instr::BRK),
        ("RTI".to_string(), Instr::RTI),
        ("BIT".to_string(), Instr::BIT),
        ("NOP".to_string(), Instr::NOP),
        ("STP".to_string(), Instr::STP),
        ("SLO".to_string(), Instr::SLO),
        ("ANC".to_string(), Instr::ANC),
        ("RLA".to_string(), Instr::RLA),
        ("SRE".to_string(), Instr::SRE),
        ("ALR".to_string(), Instr::ALR),
        ("RRA".to_string(), Instr::RRA),
        ("ARR".to_string(), Instr::ARR),
        ("SAX".to_string(), Instr::SAX),
        ("XAA".to_string(), Instr::XAA),
        ("AHX".to_string(), Instr::AHX),
        ("TAS".to_string(), Instr::TAS),
        ("SHY".to_string(), Instr::SHY),
        ("SHX".to_string(), Instr::SHX),
        ("LAX".to_string(), Instr::LAX),
        ("LAS".to_string(), Instr::LAS),
        ("DCP".to_string(), Instr::DCP),
        ("AXS".to_string(), Instr::AXS),
        ("ISC".to_string(), Instr::ISC)
    ]);

    pub static ref OPCODES: HashMap<(Instr, AdrMode), Vec<Opcode>> = HashMap::from([
        ((Instr::BRK, AdrMode::IMPL), vec![Opcode::new(0x00, true, vec!["BRK".to_string()])]),
        ((Instr::ORA, AdrMode::INDX), vec![Opcode::new(0x01, true, vec!["ORA ($BB,X)".to_string()])]),
        ((Instr::ORA, AdrMode::ZP), vec![Opcode::new(0x05, true, vec!["ORA $BB".to_string()])]),
        ((Instr::ORA, AdrMode::IMM), vec![Opcode::new(0x09, true, vec!["ORA #$BB".to_string()])]),
        ((Instr::ORA, AdrMode::ABS), vec![Opcode::new(0x0D, true, vec!["ORA $LLHH".to_string()])]),
        ((Instr::ORA, AdrMode::INDY), vec![Opcode::new(0x11, true, vec!["ORA ($BB),Y".to_string()])]),
        ((Instr::ORA, AdrMode::ZPX), vec![Opcode::new(0x15, true, vec!["ORA $BB,X".to_string()])]),
        ((Instr::ORA, AdrMode::ABSY), vec![Opcode::new(0x19, true, vec!["ORA $LLHH,Y".to_string()])]),
        ((Instr::ORA, AdrMode::ABSX), vec![Opcode::new(0x1D, true, vec!["ORA $LLHH,X".to_string()])]),
        ((Instr::STP, AdrMode::IMPL), vec![
            Opcode::new(0x02, false, vec!["STP".to_string()]),
            Opcode::new(0x12, false, vec!["STP".to_string()]),
            Opcode::new(0x22, false, vec!["STP".to_string()]),
            Opcode::new(0x32, false, vec!["STP".to_string()]),
            Opcode::new(0x42, false, vec!["STP".to_string()]),
            Opcode::new(0x52, false, vec!["STP".to_string()]),
            Opcode::new(0x62, false, vec!["STP".to_string()]),
            Opcode::new(0x72, false, vec!["STP".to_string()]),
            Opcode::new(0x92, false, vec!["STP".to_string()]),
            Opcode::new(0xB2, false, vec!["STP".to_string()]),
            Opcode::new(0xD2, false, vec!["STP".to_string()]),
            Opcode::new(0xF2, false, vec!["STP".to_string()])
        ]),
        ((Instr::SLO, AdrMode::INDX), vec![Opcode::new(0x03, false, vec!["SLO ($BB,X)".to_string()])]),
        ((Instr::SLO, AdrMode::ZP), vec![Opcode::new(0x07, false, vec!["SLO $BB".to_string()])]),
        ((Instr::SLO, AdrMode::ABS), vec![Opcode::new(0x0F, false, vec!["SLO $LLHH".to_string()])]),
        ((Instr::SLO, AdrMode::INDY), vec![Opcode::new(0x13, false, vec!["SLO ($BB),Y".to_string()])]),
        ((Instr::SLO, AdrMode::ZPX), vec![Opcode::new(0x17, false, vec!["SLO $BB,X".to_string()])]),
        ((Instr::SLO, AdrMode::ABSY), vec![Opcode::new(0x1B, false, vec!["SLO $LLHH,Y".to_string()])]),
        ((Instr::SLO, AdrMode::ABSX), vec![Opcode::new(0x1F, false, vec!["SLO $LLHH,X".to_string()])]),
        ((Instr::NOP, AdrMode::ZP), vec![
            Opcode::new(0x04, false, vec!["NOP $BB".to_string()]),
            Opcode::new(0x44, false, vec!["NOP $BB".to_string()]),
            Opcode::new(0x64, false, vec!["NOP $BB".to_string()])
        ]),
        ((Instr::NOP, AdrMode::ABS), vec![Opcode::new(0x0C, false, vec!["NOP $LLHH".to_string()])]),
        ((Instr::NOP, AdrMode::ZPX), vec![
            Opcode::new(0x14, false, vec!["NOP $BB,X".to_string()]),
            Opcode::new(0x34, false, vec!["NOP $BB,X".to_string()]),
            Opcode::new(0x54, false, vec!["NOP $BB,X".to_string()]),
            Opcode::new(0x74, false, vec!["NOP $BB,X".to_string()]),
            Opcode::new(0xD4, false, vec!["NOP $BB,X".to_string()]),
            Opcode::new(0xF4, false, vec!["NOP $BB,X".to_string()])
        ]),
        ((Instr::NOP, AdrMode::IMPL), vec![
            Opcode::new(0x1A, false, vec!["NOP".to_string()]),
            Opcode::new(0x3A, false, vec!["NOP".to_string()]),
            Opcode::new(0x5A, false, vec!["NOP".to_string()]),
            Opcode::new(0x7A, false, vec!["NOP".to_string()]),
            Opcode::new(0xDA, false, vec!["NOP".to_string()]),
            Opcode::new(0xEA, true, vec!["NOP".to_string()]),
            Opcode::new(0xFA, false, vec!["NOP".to_string()])
        ]),
        ((Instr::NOP, AdrMode::ABSX), vec![
            Opcode::new(0x1C, false, vec!["NOP $LLHH,X".to_string()]),
            Opcode::new(0x3C, false, vec!["NOP $LLHH,X".to_string()]),
            Opcode::new(0x5C, false, vec!["NOP $LLHH,X".to_string()]),
            Opcode::new(0x7C, false, vec!["NOP $LLHH,X".to_string()]),
            Opcode::new(0xDC, false, vec!["NOP $LLHH,X".to_string()]),
            Opcode::new(0xFC, false, vec!["NOP $LLHH,X".to_string()])
        ]),
        ((Instr::NOP, AdrMode::IMM), vec![
            Opcode::new(0x80, false, vec!["NOP #$BB".to_string()]),
            Opcode::new(0x82, false, vec!["NOP #$BB".to_string()]),
            Opcode::new(0x89, false, vec!["NOP #$BB".to_string()]),
            Opcode::new(0xC2, false, vec!["NOP #$BB".to_string()]),
            Opcode::new(0xE2, false, vec!["NOP #$BB".to_string()])
        ]),
        ((Instr::ASL, AdrMode::ZP), vec![Opcode::new(0x06, true, vec!["ASL $BB".to_string()])]),
        ((Instr::ASL, AdrMode::IMPL), vec![Opcode::new(0x0A, true, vec!["ASL".to_string()])]),
        ((Instr::ASL, AdrMode::ABS), vec![Opcode::new(0x0E, true, vec!["ASL $LLHH".to_string()])]),
        ((Instr::ASL, AdrMode::ZPX), vec![Opcode::new(0x16, true, vec!["ASL $BB,X".to_string()])]),
        ((Instr::ASL, AdrMode::ABSX), vec![Opcode::new(0x1E, true, vec!["ASL $LLHH,X".to_string()])]),
        ((Instr::PHP, AdrMode::IMPL), vec![Opcode::new(0x08, true, vec!["PHP".to_string()])]),
        ((Instr::ANC, AdrMode::IMM), vec![
            Opcode::new(0x0B, false, vec!["ANC #$BB".to_string()]),
            Opcode::new(0x2B, false, vec!["ANC #$BB".to_string()])
        ]),
        ((Instr::BPL, AdrMode::REL), vec![Opcode::new(0x10, true, vec!["BPL $BB".to_string(), "BPL label".to_string()])]),
        ((Instr::CLC, AdrMode::IMPL), vec![Opcode::new(0x18, true, vec!["CLC".to_string()])]),
        ((Instr::JSR, AdrMode::ABS), vec![Opcode::new(0x20, true, vec!["JSR $LLHH".to_string()])]),
        ((Instr::AND, AdrMode::INDX), vec![Opcode::new(0x21, true, vec!["AND ($BB,X)".to_string()])]),
        ((Instr::AND, AdrMode::ZP), vec![Opcode::new(0x25, true, vec!["AND $BB".to_string()])]),
        ((Instr::AND, AdrMode::IMM), vec![Opcode::new(0x29, true, vec!["AND #$BB".to_string()])]),
        ((Instr::AND, AdrMode::ABS), vec![Opcode::new(0x2D, true, vec!["AND $LLHH".to_string()])]),
        ((Instr::AND, AdrMode::INDY), vec![Opcode::new(0x31, true, vec!["AND ($BB),Y".to_string()])]),
        ((Instr::AND, AdrMode::ZPX), vec![Opcode::new(0x35, true, vec!["AND $BB,X".to_string()])]),
        ((Instr::AND, AdrMode::ABSY), vec![Opcode::new(0x39, true, vec!["AND $LLHH,Y".to_string()])]),
        ((Instr::AND, AdrMode::ABSX), vec![Opcode::new(0x3D, true, vec!["AND $LLHH,X".to_string()])]),
        ((Instr::RLA, AdrMode::INDX), vec![Opcode::new(0x23, false, vec!["RLA ($BB,X)".to_string()])]),
        ((Instr::RLA, AdrMode::ZP), vec![Opcode::new(0x27, false, vec!["RLA $BB".to_string()])]),
        ((Instr::RLA, AdrMode::ABS), vec![Opcode::new(0x2F, false, vec!["RLA $LLHH".to_string()])]),
        ((Instr::RLA, AdrMode::INDY), vec![Opcode::new(0x33, false, vec!["RLA ($BB),Y".to_string()])]),
        ((Instr::RLA, AdrMode::ZPX), vec![Opcode::new(0x37, false, vec!["RLA $BB,X".to_string()])]),
        ((Instr::RLA, AdrMode::ABSY), vec![Opcode::new(0x3B, false, vec!["RLA $LLHH,Y".to_string()])]),
        ((Instr::RLA, AdrMode::ABSX), vec![Opcode::new(0x3F, false, vec!["RLA $LLHH,X".to_string()])]),
        ((Instr::BIT, AdrMode::ZP), vec![Opcode::new(0x24, true, vec!["BIT $BB".to_string()])]),
        ((Instr::BIT, AdrMode::ABS), vec![Opcode::new(0x2C, true, vec!["BIT $LLHH".to_string()])]),
        ((Instr::ROL, AdrMode::ZP), vec![Opcode::new(0x26, true, vec!["ROL $BB".to_string()])]),
        ((Instr::ROL, AdrMode::IMPL), vec![Opcode::new(0x2A, true, vec!["ROL".to_string()])]),
        ((Instr::ROL, AdrMode::ABS), vec![Opcode::new(0x2E, true, vec!["ROL $LLHH".to_string()])]),
        ((Instr::ROL, AdrMode::ZPX), vec![Opcode::new(0x36, true, vec!["ROL $BB,X".to_string()])]),
        ((Instr::ROL, AdrMode::ABSX), vec![Opcode::new(0x3E, true, vec!["ROL $LLHH,X".to_string()])]),
        ((Instr::PLP, AdrMode::IMPL), vec![Opcode::new(0x28, true, vec!["PLP".to_string()])]),
        ((Instr::BMI, AdrMode::REL), vec![Opcode::new(0x30, true, vec!["BMI $BB".to_string(), "BMI label".to_string()])]),
        ((Instr::SEC, AdrMode::IMPL), vec![Opcode::new(0x38, true, vec!["SEC".to_string()])]),
        ((Instr::RTI, AdrMode::IMPL), vec![Opcode::new(0x40, true, vec!["RTI".to_string()])]),
        ((Instr::EOR, AdrMode::INDX), vec![Opcode::new(0x41, true, vec!["EOR ($BB,X)".to_string()])]),
        ((Instr::EOR, AdrMode::ZP), vec![Opcode::new(0x45, true, vec!["EOR $BB".to_string()])]),
        ((Instr::EOR, AdrMode::IMM), vec![Opcode::new(0x49, true, vec!["EOR #$BB".to_string()])]),
        ((Instr::EOR, AdrMode::ABS), vec![Opcode::new(0x4D, true, vec!["EOR $LLHH".to_string()])]),
        ((Instr::EOR, AdrMode::INDY), vec![Opcode::new(0x51, true, vec!["EOR ($BB),Y".to_string()])]),
        ((Instr::EOR, AdrMode::ZPX), vec![Opcode::new(0x55, true, vec!["EOR $BB,X".to_string()])]),
        ((Instr::EOR, AdrMode::ABSY), vec![Opcode::new(0x59, true, vec!["EOR $LLHH,Y".to_string()])]),
        ((Instr::EOR, AdrMode::ABSX), vec![Opcode::new(0x5D, true, vec!["EOR $LLHH,X".to_string()])]),
        ((Instr::SRE, AdrMode::INDX), vec![Opcode::new(0x43, false, vec!["SRE ($BB,X)".to_string()])]),
        ((Instr::SRE, AdrMode::ZP), vec![Opcode::new(0x47, false, vec!["SRE $BB".to_string()])]),
        ((Instr::SRE, AdrMode::ABS), vec![Opcode::new(0x4F, false, vec!["SRE $LLHH".to_string()])]),
        ((Instr::SRE, AdrMode::INDY), vec![Opcode::new(0x53, false, vec!["SRE ($BB),Y".to_string()])]),
        ((Instr::SRE, AdrMode::ZPX), vec![Opcode::new(0x57, false, vec!["SRE $BB,X".to_string()])]),
        ((Instr::SRE, AdrMode::ABSY), vec![Opcode::new(0x5B, false, vec!["SRE $LLHH,Y".to_string()])]),
        ((Instr::SRE, AdrMode::ABSX), vec![Opcode::new(0x5F, false, vec!["SRE $LLHH,X".to_string()])]),
        ((Instr::LSR, AdrMode::ZP), vec![Opcode::new(0x46, true, vec!["LSR $BB".to_string()])]),
        ((Instr::LSR, AdrMode::IMPL), vec![Opcode::new(0x4A, true, vec!["LSR".to_string()])]),
        ((Instr::LSR, AdrMode::ABS), vec![Opcode::new(0x4E, true, vec!["LSR $LLHH".to_string()])]),
        ((Instr::LSR, AdrMode::ZPX), vec![Opcode::new(0x56, true, vec!["LSR $BB,X".to_string()])]),
        ((Instr::LSR, AdrMode::ABSX), vec![Opcode::new(0x5E, true, vec!["LSR $LLHH,X".to_string()])]),
        ((Instr::PHA, AdrMode::IMPL), vec![Opcode::new(0x48, true, vec!["PHA".to_string()])]),
        ((Instr::ALR, AdrMode::IMM), vec![Opcode::new(0x4B, false, vec!["ALR #$BB".to_string()])]),
        ((Instr::JMP, AdrMode::ABS), vec![Opcode::new(0x4C, true, vec!["JMP $LLHH".to_string()])]),
        ((Instr::JMP, AdrMode::IND), vec![Opcode::new(0x6C, true, vec!["JMP ($LLHH)".to_string()])]),
        ((Instr::BVC, AdrMode::REL), vec![Opcode::new(0x50, true, vec!["BVC $BB".to_string(), "BVC label".to_string()])]),
        ((Instr::CLI, AdrMode::IMPL), vec![Opcode::new(0x58, true, vec!["CLI".to_string()])]),
        ((Instr::RTS, AdrMode::IMPL), vec![Opcode::new(0x60, true, vec!["RTS".to_string()])]),
        ((Instr::ADC, AdrMode::INDX), vec![Opcode::new(0x61, true, vec!["ADC ($BB,X)".to_string()])]),
        ((Instr::ADC, AdrMode::ZP), vec![Opcode::new(0x65, true, vec!["ADC $BB".to_string()])]),
        ((Instr::ADC, AdrMode::IMM), vec![Opcode::new(0x69, true, vec!["ADC #$BB".to_string()])]),
        ((Instr::ADC, AdrMode::ABS), vec![Opcode::new(0x6D, true, vec!["ADC $LLHH".to_string()])]),
        ((Instr::ADC, AdrMode::INDY), vec![Opcode::new(0x71, true, vec!["ADC ($BB),Y".to_string()])]),
        ((Instr::ADC, AdrMode::ZPX), vec![Opcode::new(0x75, true, vec!["ADC $BB,X".to_string()])]),
        ((Instr::ADC, AdrMode::ABSY), vec![Opcode::new(0x79, true, vec!["ADC $LLHH,Y".to_string()])]),
        ((Instr::ADC, AdrMode::ABSX), vec![Opcode::new(0x7D, true, vec!["ADC $LLHH,X".to_string()])]),
        ((Instr::RRA, AdrMode::INDX), vec![Opcode::new(0x63, false, vec!["RRA ($BB,X)".to_string()])]),
        ((Instr::RRA, AdrMode::ZP), vec![Opcode::new(0x67, false, vec!["RRA $BB".to_string()])]),
        ((Instr::RRA, AdrMode::ABS), vec![Opcode::new(0x6F, false, vec!["RRA $LLHH".to_string()])]),
        ((Instr::RRA, AdrMode::INDY), vec![Opcode::new(0x73, false, vec!["RRA ($BB),Y".to_string()])]),
        ((Instr::RRA, AdrMode::ZPX), vec![Opcode::new(0x77, false, vec!["RRA $BB,X".to_string()])]),
        ((Instr::RRA, AdrMode::ABSY), vec![Opcode::new(0x7B, false, vec!["RRA $LLHH,Y".to_string()])]),
        ((Instr::RRA, AdrMode::ABSX), vec![Opcode::new(0x7F, false, vec!["RRA $LLHH,X".to_string()])]),
        ((Instr::ROR, AdrMode::ZP), vec![Opcode::new(0x66, true, vec!["ROR $BB".to_string()])]),
        ((Instr::ROR, AdrMode::IMPL), vec![Opcode::new(0x6A, true, vec!["ROR".to_string()])]),
        ((Instr::ROR, AdrMode::ABS), vec![Opcode::new(0x6E, true, vec!["ROR $LLHH".to_string()])]),
        ((Instr::ROR, AdrMode::ZPX), vec![Opcode::new(0x76, true, vec!["ROR $BB,X".to_string()])]),
        ((Instr::ROR, AdrMode::ABSX), vec![Opcode::new(0x7E, true, vec!["ROR $LLHH,X".to_string()])]),
        ((Instr::PLA, AdrMode::IMPL), vec![Opcode::new(0x68, true, vec!["PLA".to_string()])]),
        ((Instr::ARR, AdrMode::IMM), vec![Opcode::new(0x6B, false, vec!["ARR #$BB".to_string()])]),
        ((Instr::BVS, AdrMode::REL), vec![Opcode::new(0x70, true, vec!["BVS $BB".to_string(), "BVS label".to_string()])]),
        ((Instr::SEI, AdrMode::IMPL), vec![Opcode::new(0x78, true, vec!["SEI".to_string()])]),
        ((Instr::STA, AdrMode::INDX), vec![Opcode::new(0x81, true, vec!["STA ($BB,X)".to_string()])]),
        ((Instr::STA, AdrMode::ZP), vec![Opcode::new(0x85, true, vec!["STA $BB".to_string()])]),
        ((Instr::STA, AdrMode::ABS), vec![Opcode::new(0x8D, true, vec!["STA $LLHH".to_string()])]),
        ((Instr::STA, AdrMode::INDY), vec![Opcode::new(0x91, true, vec!["STA ($BB),Y".to_string()])]),
        ((Instr::STA, AdrMode::ZPX), vec![Opcode::new(0x95, true, vec!["STA $BB,X".to_string()])]),
        ((Instr::STA, AdrMode::ABSY), vec![Opcode::new(0x99, true, vec!["STA $LLHH,Y".to_string()])]),
        ((Instr::STA, AdrMode::ABSX), vec![Opcode::new(0x9D, true, vec!["STA $LLHH,X".to_string()])]),
        ((Instr::SAX, AdrMode::INDX), vec![Opcode::new(0x83, false, vec!["SAX ($BB,X)".to_string()])]),
        ((Instr::SAX, AdrMode::ZP), vec![Opcode::new(0x87, false, vec!["SAX $BB".to_string()])]),
        ((Instr::SAX, AdrMode::ABS), vec![Opcode::new(0x8F, false, vec!["SAX $LLHH".to_string()])]),
        ((Instr::SAX, AdrMode::ZPY), vec![Opcode::new(0x97, false, vec!["SAX $BB,Y".to_string()])]),
        ((Instr::STY, AdrMode::ZP), vec![Opcode::new(0x84, true, vec!["STY $BB".to_string()])]),
        ((Instr::STY, AdrMode::ABS), vec![Opcode::new(0x8C, true, vec!["STY $LLHH".to_string()])]),
        ((Instr::STY, AdrMode::ZPX), vec![Opcode::new(0x94, true, vec!["STY $BB,X".to_string()])]),
        ((Instr::STX, AdrMode::ZP), vec![Opcode::new(0x86, true, vec!["STX $BB".to_string()])]),
        ((Instr::STX, AdrMode::ABS), vec![Opcode::new(0x8E, true, vec!["STX $LLHH".to_string()])]),
        ((Instr::STX, AdrMode::ZPY), vec![Opcode::new(0x96, true, vec!["STX $BB,Y".to_string()])]),
        ((Instr::DEY, AdrMode::IMPL), vec![Opcode::new(0x88, true, vec!["DEY".to_string()])]),
        ((Instr::TXA, AdrMode::IMPL), vec![Opcode::new(0x8A, true, vec!["TXA".to_string()])]),
        ((Instr::XAA, AdrMode::IMM), vec![Opcode::new(0x8B, false, vec!["XAA #$BB".to_string()])]),
        ((Instr::BCC, AdrMode::REL), vec![Opcode::new(0x90, true, vec!["BCC $BB".to_string(), "BCC label".to_string()])]),
        ((Instr::AHX, AdrMode::INDY), vec![Opcode::new(0x93, false, vec!["AHX ($BB),Y".to_string()])]),
        ((Instr::AHX, AdrMode::ABSY), vec![Opcode::new(0x9F, false, vec!["AHX $LLHH,Y".to_string()])]),
        ((Instr::TYA, AdrMode::IMPL), vec![Opcode::new(0x98, true, vec!["TYA".to_string()])]),
        ((Instr::TXS, AdrMode::IMPL), vec![Opcode::new(0x9A, true, vec!["TXS".to_string()])]),
        ((Instr::TAS, AdrMode::ABSY), vec![Opcode::new(0x9B, false, vec!["TAS $LLHH,Y".to_string()])]),
        ((Instr::SHY, AdrMode::ABSX), vec![Opcode::new(0x9C, false, vec!["SHY $LLHH,X".to_string()])]),
        ((Instr::SHX, AdrMode::ABSY), vec![Opcode::new(0x9E, false, vec!["SHX $LLHH,Y".to_string()])]),
        ((Instr::LDY, AdrMode::IMM), vec![Opcode::new(0xA0, true, vec!["LDY #$BB".to_string()])]),
        ((Instr::LDY, AdrMode::ZP), vec![Opcode::new(0xA4, true, vec!["LDY $BB".to_string()])]),
        ((Instr::LDY, AdrMode::ABS), vec![Opcode::new(0xAC, true, vec!["LDY $LLHH".to_string()])]),
        ((Instr::LDY, AdrMode::ZPX), vec![Opcode::new(0xB4, true, vec!["LDY $BB,X".to_string()])]),
        ((Instr::LDY, AdrMode::ABSX), vec![Opcode::new(0xBC, true, vec!["LDY $LLHH,X".to_string()])]),
        ((Instr::LDA, AdrMode::INDX), vec![Opcode::new(0xA1, true, vec!["LDA ($BB,X)".to_string()])]),
        ((Instr::LDA, AdrMode::ZP), vec![Opcode::new(0xA5, true, vec!["LDA $BB".to_string()])]),
        ((Instr::LDA, AdrMode::IMM), vec![Opcode::new(0xA9, true, vec!["LDA #$BB".to_string()])]),
        ((Instr::LDA, AdrMode::ABS), vec![Opcode::new(0xAD, true, vec!["LDA $LLHH".to_string()])]),
        ((Instr::LDA, AdrMode::INDY), vec![Opcode::new(0xB1, true, vec!["LDA ($BB),Y".to_string()])]),
        ((Instr::LDA, AdrMode::ZPX), vec![Opcode::new(0xB5, true, vec!["LDA $BB,X".to_string()])]),
        ((Instr::LDA, AdrMode::ABSY), vec![Opcode::new(0xB9, true, vec!["LDA $LLHH,Y".to_string()])]),
        ((Instr::LDA, AdrMode::ABSX), vec![Opcode::new(0xBD, true, vec!["LDA $LLHH,X".to_string()])]),
        ((Instr::LDX, AdrMode::IMM), vec![Opcode::new(0xA2, true, vec!["LDX #$BB".to_string()])]),
        ((Instr::LDX, AdrMode::ZP), vec![Opcode::new(0xA6, true, vec!["LDX $BB".to_string()])]),
        ((Instr::LDX, AdrMode::ABS), vec![Opcode::new(0xAE, true, vec!["LDX $LLHH".to_string()])]),
        ((Instr::LDX, AdrMode::ZPY), vec![Opcode::new(0xB6, true, vec!["LDX $BB,Y".to_string()])]),
        ((Instr::LDX, AdrMode::ABSY), vec![Opcode::new(0xBE, true, vec!["LDX $LLHH,Y".to_string()])]),
        ((Instr::LAX, AdrMode::INDX), vec![Opcode::new(0xA3, false, vec!["LAX ($BB,X)".to_string()])]),
        ((Instr::LAX, AdrMode::ZP), vec![Opcode::new(0xA7, false, vec!["LAX $BB".to_string()])]),
        ((Instr::LAX, AdrMode::IMM), vec![Opcode::new(0xAB, false, vec!["LAX #$BB".to_string()])]),
        ((Instr::LAX, AdrMode::ABS), vec![Opcode::new(0xAF, false, vec!["LAX $LLHH".to_string()])]),
        ((Instr::LAX, AdrMode::INDY), vec![Opcode::new(0xB3, false, vec!["LAX ($BB),Y".to_string()])]),
        ((Instr::LAX, AdrMode::ZPY), vec![Opcode::new(0xB7, false, vec!["LAX $BB,Y".to_string()])]),
        ((Instr::LAX, AdrMode::ABSY), vec![Opcode::new(0xBF, false, vec!["LAX $LLHH,Y".to_string()])]),
        ((Instr::TAY, AdrMode::IMPL), vec![Opcode::new(0xA8, true, vec!["TAY".to_string()])]),
        ((Instr::TAX, AdrMode::IMPL), vec![Opcode::new(0xAA, true, vec!["TAX".to_string()])]),
        ((Instr::BCS, AdrMode::REL), vec![Opcode::new(0xB0, true, vec!["BCS $BB".to_string(), "BCS label".to_string()])]),
        ((Instr::CLV, AdrMode::IMPL), vec![Opcode::new(0xB8, true, vec!["CLV".to_string()])]),
        ((Instr::TSX, AdrMode::IMPL), vec![Opcode::new(0xBA, true, vec!["TSX".to_string()])]),
        ((Instr::LAS, AdrMode::ABSY), vec![Opcode::new(0xBB, false, vec!["LAS $LLHH,Y".to_string()])]),
        ((Instr::CPY, AdrMode::IMM), vec![Opcode::new(0xC0, true, vec!["CPY #$BB".to_string()])]),
        ((Instr::CPY, AdrMode::ZP), vec![Opcode::new(0xC4, true, vec!["CPY $BB".to_string()])]),
        ((Instr::CPY, AdrMode::ABS), vec![Opcode::new(0xCC, true, vec!["CPY $LLHH".to_string()])]),
        ((Instr::CMP, AdrMode::INDX), vec![Opcode::new(0xC1, true, vec!["CMP ($BB,X)".to_string()])]),
        ((Instr::CMP, AdrMode::ZP), vec![Opcode::new(0xC5, true, vec!["CMP $BB".to_string()])]),
        ((Instr::CMP, AdrMode::IMM), vec![Opcode::new(0xC9, true, vec!["CMP #$BB".to_string()])]),
        ((Instr::CMP, AdrMode::ABS), vec![Opcode::new(0xCD, true, vec!["CMP $LLHH".to_string()])]),
        ((Instr::CMP, AdrMode::INDY), vec![Opcode::new(0xD1, true, vec!["CMP ($BB),Y".to_string()])]),
        ((Instr::CMP, AdrMode::ZPX), vec![Opcode::new(0xD5, true, vec!["CMP $BB,X".to_string()])]),
        ((Instr::CMP, AdrMode::ABSY), vec![Opcode::new(0xD9, true, vec!["CMP $LLHH,Y".to_string()])]),
        ((Instr::CMP, AdrMode::ABSX), vec![Opcode::new(0xDD, true, vec!["CMP $LLHH,X".to_string()])]),
        ((Instr::DCP, AdrMode::INDX), vec![Opcode::new(0xC3, false, vec!["DCP ($BB,X)".to_string()])]),
        ((Instr::DCP, AdrMode::ZP), vec![Opcode::new(0xC7, false, vec!["DCP $BB".to_string()])]),
        ((Instr::DCP, AdrMode::ABS), vec![Opcode::new(0xCF, false, vec!["DCP $LLHH".to_string()])]),
        ((Instr::DCP, AdrMode::INDY), vec![Opcode::new(0xD3, false, vec!["DCP ($BB),Y".to_string()])]),
        ((Instr::DCP, AdrMode::ZPX), vec![Opcode::new(0xD7, false, vec!["DCP $BB,X".to_string()])]),
        ((Instr::DCP, AdrMode::ABSY), vec![Opcode::new(0xDB, false, vec!["DCP $LLHH,Y".to_string()])]),
        ((Instr::DCP, AdrMode::ABSX), vec![Opcode::new(0xDF, false, vec!["DCP $LLHH,X".to_string()])]),
        ((Instr::DEC, AdrMode::ZP), vec![Opcode::new(0xC6, true, vec!["DEC $BB".to_string()])]),
        ((Instr::DEC, AdrMode::ABS), vec![Opcode::new(0xCE, true, vec!["DEC $LLHH".to_string()])]),
        ((Instr::DEC, AdrMode::ZPX), vec![Opcode::new(0xD6, true, vec!["DEC $BB,X".to_string()])]),
        ((Instr::DEC, AdrMode::ABSX), vec![Opcode::new(0xDE, true, vec!["DEC $LLHH,X".to_string()])]),
        ((Instr::INY, AdrMode::IMPL), vec![Opcode::new(0xC8, true, vec!["INY".to_string()])]),
        ((Instr::DEX, AdrMode::IMPL), vec![Opcode::new(0xCA, true, vec!["DEX".to_string()])]),
        ((Instr::AXS, AdrMode::IMM), vec![Opcode::new(0xCB, false, vec!["AXS #$BB".to_string()])]),
        ((Instr::BNE, AdrMode::REL), vec![Opcode::new(0xD0, true, vec!["BNE $BB".to_string(), "BNE label".to_string()])]),
        ((Instr::CLD, AdrMode::IMPL), vec![Opcode::new(0xD8, true, vec!["CLD".to_string()])]),
        ((Instr::CPX, AdrMode::IMM), vec![Opcode::new(0xE0, true, vec!["CPX #$BB".to_string()])]),
        ((Instr::CPX, AdrMode::ZP), vec![Opcode::new(0xE4, true, vec!["CPX $BB".to_string()])]),
        ((Instr::CPX, AdrMode::ABS), vec![Opcode::new(0xEC, true, vec!["CPX $LLHH".to_string()])]),
        ((Instr::SBC, AdrMode::INDX), vec![Opcode::new(0xE1, true, vec!["SBC ($BB,X)".to_string()])]),
        ((Instr::SBC, AdrMode::ZP), vec![Opcode::new(0xE5, true, vec!["SBC $BB".to_string()])]),
        ((Instr::SBC, AdrMode::IMM), vec![
            Opcode::new(0xE9, true, vec!["SBC #$BB".to_string()]),
            Opcode::new(0xEB, false, vec!["SBC #$BB".to_string()])
        ]),
        ((Instr::SBC, AdrMode::ABS), vec![Opcode::new(0xED, true, vec!["SBC $LLHH".to_string()])]),
        ((Instr::SBC, AdrMode::INDY), vec![Opcode::new(0xF1, true, vec!["SBC ($BB),Y".to_string()])]),
        ((Instr::SBC, AdrMode::ZPX), vec![Opcode::new(0xF5, true, vec!["SBC $BB,X".to_string()])]),
        ((Instr::SBC, AdrMode::ABSY), vec![Opcode::new(0xF9, true, vec!["SBC $LLHH,Y".to_string()])]),
        ((Instr::SBC, AdrMode::ABSX), vec![Opcode::new(0xFD, true, vec!["SBC $LLHH,X".to_string()])]),
        ((Instr::ISC, AdrMode::INDX), vec![Opcode::new(0xE3, false, vec!["ISC ($BB,X)".to_string()])]),
        ((Instr::ISC, AdrMode::ZP), vec![Opcode::new(0xE7, false, vec!["ISC $BB".to_string()])]),
        ((Instr::ISC, AdrMode::ABS), vec![Opcode::new(0xEF, false, vec!["ISC $LLHH".to_string()])]),
        ((Instr::ISC, AdrMode::INDY), vec![Opcode::new(0xF3, false, vec!["ISC ($BB),Y".to_string()])]),
        ((Instr::ISC, AdrMode::ZPX), vec![Opcode::new(0xF7, false, vec!["ISC $BB,X".to_string()])]),
        ((Instr::ISC, AdrMode::ABSY), vec![Opcode::new(0xFB, false, vec!["ISC $LLHH,Y".to_string()])]),
        ((Instr::ISC, AdrMode::ABSX), vec![Opcode::new(0xFF, false, vec!["ISC $LLHH,X".to_string()])]),
        ((Instr::INC, AdrMode::ZP), vec![Opcode::new(0xE6, true, vec!["INC $BB".to_string()])]),
        ((Instr::INC, AdrMode::ABS), vec![Opcode::new(0xEE, true, vec!["INC $LLHH".to_string()])]),
        ((Instr::INC, AdrMode::ZPX), vec![Opcode::new(0xF6, true, vec!["INC $BB,X".to_string()])]),
        ((Instr::INC, AdrMode::ABSX), vec![Opcode::new(0xFE, true, vec!["INC $LLHH,X".to_string()])]),
        ((Instr::INX, AdrMode::IMPL), vec![Opcode::new(0xE8, true, vec!["INX".to_string()])]),
        ((Instr::BEQ, AdrMode::REL), vec![Opcode::new(0xF0, true, vec!["BEQ $BB".to_string(), "BEQ label".to_string()])]),
        ((Instr::SED, AdrMode::IMPL), vec![Opcode::new(0xF8, true, vec!["SED".to_string()])]),
    ]);
}
